@charset "UTF-8";

// ==========================================================================
// mixins
// ==========================================================================

@use "./variables" as global;
@use "./functions" as functions;


// Inner Setting
@mixin inner($inner-width) {
    max-width: $inner-width;
    margin-right: auto;
    margin-left: auto;
}

// Z-index Setting
@mixin z-index($key) {
    @if map-has-key(global.$layer, $key) {
        z-index: map-get(global.$layer, $key);
    }

    @else {
        @error "[ERR]$layer does not have #{$key}.";
    }
}

// Responsive Movie
@mixin rwd-iframe($width: 16, $height: 9) {
    position: relative;
    padding-top: percentage(calc($height / $width));

    > iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100% !important;
        height: 100% !important;
    }
}

// Responsive Image
@mixin rwd-image($width: 16, $height: 9) {
    position: relative;
    padding-top: percentage(calc($height / $width));

    > img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100% !important;
        height: 100% !important;
    }
}

// Breakpoint
@mixin media($breakpoint) {
    @if map-has-key(global.$breakpoints, $breakpoint) {
        @media #{map-get(global.$breakpoints, $breakpoint)} {
            @content;
        }
    }

    @else {
        @error "[ERR]$breakpoints does not have #{$breakpoint}.";
    }
}

// Link Color Setting
@mixin link-color($normal, $hover: $normal) {
    color: $normal;
    text-decoration: none;
    transition: .3s;

    &:hover, &:focus, &:active {
        color: lighten($hover, 40%);
        text-decoration: none;
    }
}


// 呼び出し例
// @include font-settings(SPフォントサイズ, PCフォントサイズ, 行送り , 太さ, トラッキング)
@mixin font-settings($sp-pixels, $pc-pixels, $height: 1.5, $weight: false , $spacing: false) {
    $sp-rems: functions.rem($sp-pixels);
    $pc-rems: functions.rem($pc-pixels);
    $recommendation: calc(
        (100vw - global.$sp-breakpoints-px) *
        (
            ($pc-pixels - $sp-pixels) /
            (global.$tb-breakpoints - global.$sp-breakpoints)
        ) + $sp-rems
    );

    font-size: clamp($sp-rems, $recommendation, $pc-rems);

	@if $weight {
		font-weight: $weight;
	}

	@if $height {
		line-height: $height;
	}

	@if $spacing {
		letter-spacing: ($spacing / 1000) * 1em;
	}
}

// Card Setting
// @include cards(カラム数, カード間の横幅 , カード間の縦幅)
@mixin cards($col_num, $margin-x, $margin-y) {
  $col_num_tb: calc($col_num - 1);
  $col_num_sp: 1;

  & > .p-cards__item {
    flex-direction: column;

    // カラム数、カード間マージンから、カードの幅を算出
    width: calc(
      #{percentage(calc(100 / $col_num) * 0.01)} - #{$margin-x} *
        calc(#{$col_num - 1} / #{$col_num})
    );
    // width: 100px;
    height: auto;
    margin-right: $margin-x;
    margin-bottom: $margin-y;

    // 右端のカードのマージンを0に設定
    &:nth-of-type(#{$col_num}n) {
      margin-right: 0;
    }

    @include media(tb) {
      width: calc(
        #{percentage(calc(100 / $col_num_tb) * 0.01)} - #{$margin-x} *
          calc(#{$col_num_tb - 1} / #{$col_num_tb})
      );

      margin-right: $margin-x;
      margin-bottom: $margin-y;

      &:nth-of-type(#{$col_num}n) {
        margin-right: $margin-x;
      }

      // 右端のカードのマージンを0に設定
      &:nth-of-type(#{$col_num_tb}n) {
        margin-right: 0;
      }
    }

    @include media(sp) {
      width: calc(
        #{percentage(calc(100 / $col_num_sp) * 0.01)} - #{$margin-x} *
          calc(#{$col_num_sp - 1} / #{$col_num_sp})
      );
      margin-right: 0;
      margin-bottom: $margin-y;

      &:nth-of-type(#{$col_num}n) {
        margin-right: 0;
      }
    }
  }
}
